<?xml version="1.0" encoding="UTF-8"?>

<!-- CUI -->

<BlockGenus name="new-object-Scanner[@object]" kind="function"
	initlabel="Scanner" editable-label="yes" header-label="新しく"
	footer-label="を作る" color="16 240 27">
	<Type>Scanner</Type>
	<BlockConnectors>
		<BlockConnector connector-kind="plug" connector-type="object"></BlockConnector>
		<BlockConnector label="" connector-kind="socket"
			connector-type="object">
			<DefaultArg genus-name="systemin"></DefaultArg>
		</BlockConnector>
	</BlockConnectors>
</BlockGenus>

<BlockGenus name="cui-print[@string]" kind="command"
	initlabel="(CUI)出力する" color="255 0 0">
	<BlockConnectors>
		<BlockConnector connector-kind="socket" connector-type="string">
			<DefaultArg genus-name="string" label="あいうえお"></DefaultArg>
		</BlockConnector>
	</BlockConnectors>
</BlockGenus>

<BlockGenus name="systemin" kind="data" initlabel="System.in"
	color="255 0 0">
	<BlockConnectors>
		<BlockConnector connector-kind="plug" connector-type="object">
		</BlockConnector>
	</BlockConnectors>
</BlockGenus>

<BlockGenus name="cui-print[@int]" kind="command" initlabel="(CUI)出力する"
	color="255 0 0">
	<BlockConnectors>
		<BlockConnector connector-kind="socket" connector-type="number">
			<DefaultArg genus-name="number" label="1"></DefaultArg>
		</BlockConnector>
	</BlockConnectors>
</BlockGenus>
<BlockGenus name="cui-print[@object]" kind="command"
	initlabel="(CUI)出力する" color="255 0 0">
	<BlockConnectors>
		<BlockConnector connector-kind="socket" connector-type="object">
		</BlockConnector>
	</BlockConnectors>
</BlockGenus>
<BlockGenus name="cui-print[@double]" kind="command"
	initlabel="(CUI)出力する" color="255 0 0">
	<BlockConnectors>
		<BlockConnector connector-kind="socket" connector-type="double-number">
			<DefaultArg genus-name="double-number" label="1.0"></DefaultArg>
		</BlockConnector>
	</BlockConnectors>
</BlockGenus>

<BlockGenus name="cui-println[@int]" kind="command"
	initlabel="(CUI)出力して改行する" color="255 0 0">
	<BlockConnectors>
		<BlockConnector connector-kind="socket" connector-type="string">
			<DefaultArg genus-name="string" label="あいうえお"></DefaultArg>
		</BlockConnector>
	</BlockConnectors>
</BlockGenus>
<BlockGenus name="cui-println[@string]" kind="command"
	initlabel="(CUI)出力して改行する" color="255 0 0">
	<BlockConnectors>
		<BlockConnector connector-kind="socket" connector-type="string">
			<DefaultArg genus-name="string" label="あいうえお"></DefaultArg>
		</BlockConnector>
	</BlockConnectors>
</BlockGenus>
<BlockGenus name="cui-println[@double]" kind="command"
	initlabel="(CUI)出力して改行する" color="255 0 0">
	<BlockConnectors>
		<BlockConnector connector-kind="socket" connector-type="string">
			<DefaultArg genus-name="string" label="あいうえお"></DefaultArg>
		</BlockConnector>
	</BlockConnectors>
</BlockGenus>
<BlockGenus name="cui-println[@object]" kind="command"
	initlabel="(CUI)出力して改行する" color="255 0 0">
	<BlockConnectors>
		<BlockConnector connector-kind="socket" connector-type="string">
			<DefaultArg genus-name="string" label="あいうえお"></DefaultArg>
		</BlockConnector>
	</BlockConnectors>
</BlockGenus>

<BlockGenus name="Scanner-next[]" kind="function" initlabel="入力を受け取る（文字列型）"
	color="255 255 100" label-suffix="">
	<Name>next</Name>
	<Type>String</Type>
	<BlockConnectors>
		<BlockConnector connector-kind="plug" connector-type="string"
			position-type="single">
		</BlockConnector>
	</BlockConnectors>
</BlockGenus>

<BlockGenus name="Scanner-nextLine[]" kind="function"
	initlabel="入力を受け取る（文字列型）" color="255 255 100" label-suffix="">
	<Name>nextLine</Name>
	<Type>String</Type>
	<BlockConnectors>
		<BlockConnector connector-kind="plug" connector-type="string"
			position-type="single">
		</BlockConnector>
	</BlockConnectors>
</BlockGenus>

<BlockGenus name="Scanner-nextInt[]" kind="function"
	initlabel="入力を受け取る(int型)" color="255 0 0">
	<Name>nextInt</Name>
	<Type>int</Type>
	<BlockConnectors>
		<BlockConnector connector-kind="plug" connector-type="number">
		</BlockConnector>
	</BlockConnectors>
</BlockGenus>

<BlockGenus name="Scanner-nextDouble[]" kind="function"
	initlabel="入力を受け取る(double型)" color="255 0 0">
	<Name>nextDouble</Name>
	<Type>double</Type>
	<BlockConnectors>
		<BlockConnector connector-kind="plug" connector-type="double-number">
		</BlockConnector>
	</BlockConnectors>
</BlockGenus>

<BlockGenus name="Scanner-hasNextDouble[]" kind="data"
	initlabel="入力がdouble型か調べる" color="255 0 0">
	<Name>hasNextDouble</Name>
	<Type>boolean</Type>
	<BlockConnectors>
		<BlockConnector connector-kind="plug" connector-type="boolean">
		</BlockConnector>
	</BlockConnectors>
</BlockGenus>


<BlockGenus name="Scanner-hasNextInt[]" kind="data"
	initlabel="入力がint型か調べる" color="255 0 0">
	<Name>hasNextInt</Name>
	<Type>boolean</Type>
	<BlockConnectors>
		<BlockConnector connector-kind="plug" connector-type="boolean">
		</BlockConnector>
	</BlockConnectors>
</BlockGenus>


<BlockGenus name="local-var-object-Scanner" kind="local-variable"
	initlabel="scanner" header-label="Scanner型の変数を作り、" footer-label="と名付ける"
	editable-label="yes" label-unique="yes" color="230 0 255 ">
	<Type>Scanner</Type>
	<BlockConnectors>
		<BlockConnector label="初期値" connector-kind="socket"
			connector-type="object">
			<DefaultArg genus-name="new-object-withobject" label="Scanner"></DefaultArg>
		</BlockConnector>
	</BlockConnectors>
	<Stubs>
		<Stub stub-genus="getter">
			<LangSpecProperties>
				<LangSpecProperty key="vm-cmd-name" value="eval-local"></LangSpecProperty>
				<LangSpecProperty key="scope" value="local"></LangSpecProperty>
			</LangSpecProperties>
		</Stub>
		<Stub stub-genus="setter">
			<LangSpecProperties>
				<LangSpecProperty key="vm-cmd-name" value="eval-setlocal"></LangSpecProperty>
				<LangSpecProperty key="scope" value="local"></LangSpecProperty>
			</LangSpecProperties>
		</Stub>
	</Stubs>
	<ClassMethods>
		<CategoryName name="Scanner" classname="Scanner">
			<MethodName>Scanner-nextInt[]</MethodName>
			<MethodName>Scanner-nextDouble[]</MethodName>
			<MethodName>Scanner-next[]</MethodName>
			<MethodName>Scanner-nextLine[]</MethodName>
			<MethodName>Scanner-hasNextDouble[]</MethodName>
			<MethodName>Scanner-hasNextInt[]</MethodName>
		</CategoryName>

	</ClassMethods>
	<LangSpecProperties>
		<LangSpecProperty key="scope" value="local"></LangSpecProperty>
		<LangSpecProperty key="type" value="object"></LangSpecProperty>
		<LangSpecProperty key="is-owned-by-breed" value="yes"></LangSpecProperty>
		<LangSpecProperty key="is-monitorable" value="yes"></LangSpecProperty>
	</LangSpecProperties>
</BlockGenus>

<BlockGenus name="local-var-object-Random" kind="local-variable"
	initlabel="random" header-label="Random型の変数を作り、" footer-label="と名付ける"
	editable-label="yes" label-unique="yes" color="230 0 255 ">
	<Type>Random</Type>
	<BlockConnectors>
		<BlockConnector label="初期値" connector-kind="socket"
			connector-type="object">
			<DefaultArg genus-name="new-object-Random[]" label="Random"></DefaultArg>
		</BlockConnector>
	</BlockConnectors>
	<Stubs>
		<Stub stub-genus="getter">
			<LangSpecProperties>
				<LangSpecProperty key="vm-cmd-name" value="eval-local"></LangSpecProperty>
				<LangSpecProperty key="scope" value="local"></LangSpecProperty>
			</LangSpecProperties>
		</Stub>
		<Stub stub-genus="setter">
			<LangSpecProperties>
				<LangSpecProperty key="vm-cmd-name" value="eval-setlocal"></LangSpecProperty>
				<LangSpecProperty key="scope" value="local"></LangSpecProperty>
			</LangSpecProperties>
		</Stub>
	</Stubs>
	<ClassMethods>
		<CategoryName name="Random" className="Random">
			<MethodName>Random-nextInt[]</MethodName>
			<MethodName>Random-nextInt[@int]</MethodName>
			<MethodName>Random-nextDouble[]</MethodName>
		</CategoryName>
	</ClassMethods>
	<LangSpecProperties>
		<LangSpecProperty key="scope" value="local"></LangSpecProperty>
		<LangSpecProperty key="type" value="object"></LangSpecProperty>
		<LangSpecProperty key="is-owned-by-breed" value="yes"></LangSpecProperty>
		<LangSpecProperty key="is-monitorable" value="yes"></LangSpecProperty>
	</LangSpecProperties>
</BlockGenus>


<BlockGenus name="Random-nextInt[]" kind="function"
	initlabel="乱数を生成する(int型)" color="255 0 0">
	<Name>nextInt</Name>
	<Type>int</Type>
	<BlockConnectors>
		<BlockConnector connector-kind="plug" connector-type="number">
		</BlockConnector>
	</BlockConnectors>
</BlockGenus>

<BlockGenus name="new-object-Random[]" kind="function"
	initlabel="Random" editable-label="yes" header-label="新しく"
	footer-label="を作る" color="16 240 27">
	<description>
		<text>
			新しいオブジェクトを生成します。このブロックはオブジェクト型の変数に代入します。
		</text>
	</description>
	<Type>Random</Type>
	<BlockConnectors>
		<BlockConnector connector-kind="plug" connector-type="object"></BlockConnector>
	</BlockConnectors>
	<LangSpecProperties>
		<LangSpecProperty key="vm-cmd-name" value="new-object"></LangSpecProperty>
		<LangSpecProperty key="stack-type" value="breed"></LangSpecProperty>
	</LangSpecProperties>
</BlockGenus>

<BlockGenus name="Random-nextInt[@int]" kind="function"
	initlabel="上限値より小さい乱数を生成する(int型)" color="255 0 0">
	<Name>nextInt</Name>
	<Type>int</Type>
	<BlockConnectors>
		<BlockConnector connector-kind="plug" connector-type="number">
		</BlockConnector>
		<BlockConnector label="上限値" connector-kind="socket"
			connector-type="number">
			<DefaultArg genus-name="number" label="10"></DefaultArg>
		</BlockConnector>
	</BlockConnectors>
</BlockGenus>

<BlockGenus name="Random-nextDouble[]" kind="function"
	initlabel="乱数を生成する(double型)" color="255 0 0">
	<Name>nextDouble</Name>
	<Type>int</Type>
	<BlockConnectors>
		<BlockConnector connector-kind="plug" connector-type="double-number">
		</BlockConnector>
	</BlockConnectors>
</BlockGenus>

<!-- <BlockGenus name="next" kind="function" initlabel="入力を受け取る(文字列型)" color="255 
	0 0"> <Name>next</Name> <Type>String</Type> <BlockConnectors> <BlockConnector 
	connector-kind="plug" connector-type="string"> </BlockConnector> </BlockConnectors> 
	</BlockGenus> -->

<BlockGenus name="String-hashCode[@string]" kind="function"
	initlabel="ハッシュ値を求める" color="255 0 0">
	<Type>int</Type>
	<Name>hashCode</Name>
	<BlockConnectors>
		<BlockConnector connector-kind="plug" connector-type="number" />
		<BlockConnector connector-kind="socket" connector-type="string" />
	</BlockConnectors>
</BlockGenus>


<BlockGenus name="input-getInt[]" kind="function" initlabel="キーボードから整数を入力し、その値"
	color="255 0 0">
	<Type>int</Type>
	<Name>getInt</Name>
	<BlockConnectors>
		<BlockConnector connector-kind="plug" connector-type="number" />
	</BlockConnectors>
</BlockGenus>

<BlockGenus name="input-getString[]" kind="function"
	initlabel="キーボードから文字列を入力し、その値" color="255 0 0">
	<Type>String</Type>
	<Name>getString</Name>
	<BlockConnectors>
		<BlockConnector connector-kind="plug" connector-type="string" />
	</BlockConnectors>
</BlockGenus>

<BlockGenus name="input-getDouble[]" kind="function"
	initlabel="キーボードから実数を入力し、その値" color="255 0 0">
	<Type>double</Type>
	<Name>getDouble</Name>
	<BlockConnectors>
		<BlockConnector connector-kind="plug" connector-type="double-number" />
	</BlockConnectors>
</BlockGenus>

<BlockGenus name="input-isInteger[@string]" kind="function"
	initlabel="整数かどうか調べる" color="255 0 0">
	<Type>boolean</Type>
	<Name>isInteger</Name>
	<BlockConnectors>
		<BlockConnector connector-kind="plug" connector-type="boolean" />
		<BlockConnector connector-kind="socket" connector-type="string"
			label="文字" />
	</BlockConnectors>
</BlockGenus>

<BlockGenus name="input-isDouble[@string]" kind="function"
	initlabel="実数かどうか調べる" color="255 0 0">
	<Type>boolean</Type>
	<Name>isDouble</Name>
	<BlockConnectors>
		<BlockConnector connector-kind="plug" connector-type="boolean" />
		<BlockConnector connector-kind="socket" connector-type="string"
			label="文字" />
	</BlockConnectors>
</BlockGenus>

<BlockGenus name="Object-hashCode[]" kind="function"
	initlabel="ハッシュ値を求める" color="255 0 0">
	<Name>hashCode</Name>
	<Type>int</Type>
	<BlockConnectors>
		<BlockConnector connector-kind="plug" connector-type="number" />
	</BlockConnectors>
</BlockGenus>
